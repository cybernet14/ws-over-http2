


HTTPbis Working Group                                          Y. Hirano
Internet-Draft                                              Google, Inc.
Intended status: Standards Track                       February 12, 2014
Expires: August 16, 2014


                  Compression Extensions for WebSocket
               draft-hirano-httpbis-websocket-over-http2

Abstract

   The WebSocket protocol enables two-way communication between a client
   running untrusted code in a controlled environment to a remote host
   that has opted-in to communications from that code.  Since it
   requires one TCP connection for every WebSocket connection, having
   multiple WebSocket connections between the same client and the same
   server, for example, a browser has many connections to a server over
   multiple tabs, is inefficient.  On the other hand, HTTP/2.0 specifies
   a fast, secure, multiplexed framing protocol.  This document provides
   bi-directional multiplxed communication on the top of HTTP/2.0.

   Please send feedback to the httpbis@ietf.org mailing list.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 16, 2014.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Hirano                   Expires August 16, 2014                [Page 1]

Internet-Draft    Compression Extensions for WebSocket     February 2014


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Conformance Requirements and Terminology . . . . . . . . . . .  4
   3.  Cross Protocol Negotiation . . . . . . . . . . . . . . . . . .  5
     3.1.  Supporting scheme negotiation using SETTINGS frame . . . .  6
   4.  Opening Handshake  . . . . . . . . . . . . . . . . . . . . . .  8
     4.1.  Handshake Request  . . . . . . . . . . . . . . . . . . . .  8
     4.2.  Handshake Response . . . . . . . . . . . . . . . . . . . .  8
   5.  Data Framing . . . . . . . . . . . . . . . . . . . . . . . . . 10
     5.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . 10
     5.2.  Frame representation . . . . . . . . . . . . . . . . . . . 10
       5.2.1.  Tunnering RFC6455 framing (Plan D) . . . . . . . . . . 10
       5.2.2.  Tunnering RFC6455 framing with END_SEGMENT mark
               (Plan A) . . . . . . . . . . . . . . . . . . . . . . . 10
       5.2.3.  HEADERS + DATAs (Plan C) . . . . . . . . . . . . . . . 10
     5.3.  Masking  . . . . . . . . . . . . . . . . . . . . . . . . . 11
   6.  Alternative Framing Design . . . . . . . . . . . . . . . . . . 12
   7.  Sending and Receiving Data . . . . . . . . . . . . . . . . . . 13
   8.  Closing the Connection . . . . . . . . . . . . . . . . . . . . 14
     8.1.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . 14
       8.1.1.  Close the WebSocket Connection . . . . . . . . . . . . 14
       8.1.2.  Start the WebSocket Closing Handshake  . . . . . . . . 14
       8.1.3.  The WebSocket Closing Handshake is Started . . . . . . 14
       8.1.4.  The WebSocket Connection is Closed . . . . . . . . . . 15
       8.1.5.  The WebSocket Connection Close Code  . . . . . . . . . 15
       8.1.6.  The WebSocket Connection Close Reason  . . . . . . . . 15
       8.1.7.  Fail the WebSocket Connection  . . . . . . . . . . . . 15
     8.2.  Abnormal Closures  . . . . . . . . . . . . . . . . . . . . 15
       8.2.1.  Client-Initiated Closure . . . . . . . . . . . . . . . 15
       8.2.2.  Server-initiated closure . . . . . . . . . . . . . . . 15
       8.2.3.  Recovering from Abnormal Closure . . . . . . . . . . . 15
     8.3.  Normal Closure of Connections  . . . . . . . . . . . . . . 15
     8.4.  Status Codes . . . . . . . . . . . . . . . . . . . . . . . 16
   9.  Security Considerations  . . . . . . . . . . . . . . . . . . . 17
   10. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 18
   11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 19
     11.1. Normative References . . . . . . . . . . . . . . . . . . . 19
     11.2. Informative References . . . . . . . . . . . . . . . . . . 19
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 20



Hirano                   Expires August 16, 2014                [Page 2]

Internet-Draft    Compression Extensions for WebSocket     February 2014


1.  Introduction

   TBD
















































Hirano                   Expires August 16, 2014                [Page 3]

Internet-Draft    Compression Extensions for WebSocket     February 2014


2.  Conformance Requirements and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   Requirements phrased in the imperative as part of algorithms (such as
   "strip any leading space characters" or "return false and abort these
   steps") are to be interpreted with the meaning of the key word
   ("MUST", "SHOULD", "MAY", etc.) used in introducing the algorithm.

   Conformance requirements phrased as algorithms or specific steps can
   be implemented in any manner, so long as the end result is
   equivalent.  In particular, the algorithms defined in this
   specification are intended to be easy to understand and are not
   intended to be performant.

   Native WebSocket means the WebSocket specified in [RFC6455].

   "Frame" has two meanings, WebSocket frame and HTTP/2.0 frame.  When
   it is obvious "WebSocket" and "HTTP/2.0" can be omitted.  For
   example, "DATA frame" means "HTTP/2.0 DATA frame" and "CLOSE frame"
   means "WebSocket CLOSE frame".




























Hirano                   Expires August 16, 2014                [Page 4]

Internet-Draft    Compression Extensions for WebSocket     February 2014


3.  Cross Protocol Negotiation

   To establish a WebSocket connection, a client need to decide the
   protocol to use by the following steps.

   1.  If the client has a HTTP/2.0 session established by previous
       requests and it knows that the session supports WebSocket over
       HTTP/2.0 by the SETTINGS_SUPPORTING_SCHEMES notification, the
       client SHOULD create a new HTTP/2.0 stream in the existing
       HTTP/2.0 session and start the opening handshake on it with an
       appropriate scheme.  Both of WebSocket (ws) and secure WebSocket
       (wss) could share the same HTTP/2.0 session.

   2.  If the client is going to establish a secure WebSocket
       connection, create a WebSocket connection over TLS with [ALPN
       draft].  The client SHOULD sends one or two of the following
       application protocols as ProtocolNameList as specified in ALPN in
       any order.

       *  "HTTP/1.1[wss]" for the native WebSocket over TLS

       *  "HTTP/2.0[wss]" for secure WebSocket over HTTP/2.0.

       If the server does not support ALPN, the client SHOULD establish
       a TLS connection and start a native WebSocket opening handshake.
       If the server returns "no_application_protocol" alert, the client
       MUST _Fail the WebSocket connection_.  If the server selects
       "HTTP/1.1[wss]" protocol, the client SHOULD establish a TLS
       connection and start a native WebSocket opening handshake.  If
       the server selects "HTTP/2.0[wss]" protocol, the client SHOULD
       create an HTTP/2.0 session and start the WebSocket opening
       handshake on it with "wss" scheme.

   3.  If the client is going to establish a non-secure WebSocket
       connection, try the native WebSocket protocol negotiation.  If
       the server advertises WebSocket layering over HTTP/2.0 in its
       opening handshake via an Alternate-Protocol header, the client
       MAY switch its protocol to WebSocket over HTTP/2.0.  Otherwise,
       the client continue to use the WebSocket protocol.

          EXAMPLE:










Hirano                   Expires August 16, 2014                [Page 5]

Internet-Draft    Compression Extensions for WebSocket     February 2014


            GET /chat HTTP/1.1
            Host: server.example.com
            Upgrade: websocket
            Connection: Upgrade
            Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
            Sec-WebSocket-Protocol: chat, superchat
            Sec-WebSocket-Version: 13
            Origin: http://example.com

          Then, the server responds as follows:

            HTTP/1.1 101 Switching Protocols
            Upgrade: websocket
            Connection: Upgrade
            Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
            Sec-WebSocket-Protocol: chat
            Alternate-Protocol: 443:http/2[http,ws]

       If the client wants to switch its protocol, the client SHOULD
       send connection close frame with code 1006 and reason like
       "Switching Protocols: 443:http/2;websocket" after the opening
       handshake, then close its connection as soon as possible.  These
       transactions MUST be hidden and MUST NOT be notified to upper
       layers like the JavaScript event queue.  Then, the client SHOULD
       reconnect to the advertised server via HTTP/2.0.  The WebSocket
       protocol allowed the server to send arbitrary frames after the
       opening handshake.  These frames could be dropped in this case.

3.1.  Supporting scheme negotiation using SETTINGS frame

   _THIS SECTION SHOULD BE INTRODUCED IN THE HTTP/2.0 SPEC_.

   By default, a client can send HEADERS frames on http and https
   schemes.  A server SHOULD send a SETTINGS frame as soon as possible
   whether it supports other schemes or not.  Here is a proposed ID and
   value which should be defined in the HTTP/2.0 specification.  If the
   server received a HEADERS with an unsupported scheme, the server MUST
   reset the stream.

   9 - SETTINGS_SUPPORTING_SCHEMES allows the sender to inform the
   remote endpoint the supporting protocol schemes.  The corresponding
   value must be a 32-bit value, and which contains flags as follows:

      bit 0: http

      bit 1: https





Hirano                   Expires August 16, 2014                [Page 6]

Internet-Draft    Compression Extensions for WebSocket     February 2014


      bit 2: ws

      bit 3: wss
















































Hirano                   Expires August 16, 2014                [Page 7]

Internet-Draft    Compression Extensions for WebSocket     February 2014


4.  Opening Handshake

4.1.  Handshake Request

   The client initiates an opening handshake by sending a HEADERS frame.
   The frame MUST NOT set the END_STREAM because WebSocket intends to
   establish a bi-directional communication port and to send arbitrary
   data after success in opening handshake.  The HEADERS Name/Value
   section will contain all of the following headers which are
   associated with the WebSocket protocol [RFC6455] opening handshake.
   Upgrade, Connection, Sec-WebSocket-Key, and Sec-WebSocket-Version
   headers MUST NOT be included because we do not have to take care of
   protocol upgrading or verification over HTTP.  The following name/
   value pairs MUST be present in every request:

      ":path": /resource name/ as used in the "Client Requirements"
      section of the WebSocket protocol specification.  (See [RFC6455])

      ":host": /host:port/ (e.g. "www.google.com:1234") as used in the
      "Client Requirements" section of the WebSocket protocol
      specification.  (See [RFC6455])

      ":version": the WebSocket protocol version of this request.  (MUST
      be "WebSocket/8", "WebSocket/13", or so.  The number MUST be
      matched with the Sec-WebSocket-Version header.  See [RFC6455])

      ":scheme": the scheme portion of the URI.  (MUST be "ws" or "wss".
      See also /secure/ flag in [RFC6455])

      ":origin": /origin/ as used in the "Client Requirements" section
      of the WebSocket protocol specification.  (See [RFC6455])

   In addition, the following OPTIONAL name/value pairs MAY be present:

      ":sec-websocket-protocol" - the Sec-WebSocket-Protocol header (See
      [RFC6455])

      ":sec-websocket-extensions" - the Sec-WebSocket-Extensions header
      (See [RFC6455])

4.2.  Handshake Response

   The server responds to a client request with a HEADERS frame.  If the
   server intends to allow the client connection, the HEADERS frame MUST
   NOT set the END_STREAM and MUST have ":status" containing "101".  Any
   status code other than 101 indicates that the WebSocket handshake has
   not completed and that the semantics of HTTP still apply.  The client
   MAY send some data to the server before receiving the successful



Hirano                   Expires August 16, 2014                [Page 8]

Internet-Draft    Compression Extensions for WebSocket     February 2014


   response.  The server MUST ignore this data when opening handshake
   fails.  After sending successful response, the server can send
   arbitrary data frames at any time.  The response status line is
   unfolded into name/value pairs like other WebSocket headers and MUST
   be present: ":status" - The WebSocket or fallback HTTP response
   status code (e.g. "101" or "101 Switching Protocols".  See
   [RFC6455]).  In addition, the following OPTIONAL name/value pairs MAY
   be present:

      ":sec-websocket-protocol" - the Sec-WebSocket-Protocol header (See
      [RFC6455])

      ":sec-websocket-extensions" - the Sec-WebSocket-Extensions header
      (See [RFC6455])

   Also, other HTTP compatible header name/value pairs MAY be present.
   All header names MUST be lowercase.  The successful server response
   MUST have ":status" containing "101".  If the handshake fails, the
   client MUST send a HTTP/2.0 data frame with empty data field to avoid
   abnormal HTTP/2.0 session termination.  The HTTP/2.0 data frame MUST
   set the END_STREAM to indicate the client intends to send no further
   data on this stream.





























Hirano                   Expires August 16, 2014                [Page 9]

Internet-Draft    Compression Extensions for WebSocket     February 2014


5.  Data Framing

5.1.  Overview

   [RFC6455] states that data is transmitted using a sequence of frames.
   This protocol follows that abstraction.  This section corresponds to
   "5.  Data Framing" section in [RFC6455] and specifies the following
   things:

   o  The representation of a WebSocket frame.

   o  The masking mechanism.

   For other things such as fragmentation and control frames, remain
   unchanged.

5.2.  Frame representation

   Several representations are proposed.  In each representation, an
   endpoint MUST set END_STREAM flag at the last HTTP/2.0 frame of an
   HTTP/2.0 stream.

5.2.1.  Tunnering RFC6455 framing (Plan D)

   A WebSocket frame byte representation is embedded in payload in
   HTTP/2.0 DATA frame.  DATA frames can be reframed, i.e.  One
   WebSocket frame can be split over multiple DATA frames and one DATA
   frames can contain multiple WebSocket frames.

5.2.2.  Tunnering RFC6455 framing with END_SEGMENT mark (Plan A)

   This plan is almost same as Plan D, but it uses END_SEGMANE flag in a
   DATA frame.  END_SEGMENT flag is specified in [HTTP/2.0 draft] and it
   indicates that the DATA frame is the last for the current segment.

   An endpoint MUST turn on END_SEGMENT on an HTTP/2.0 DATA frame
   containing the end of a WebSocket message.

5.2.3.  HEADERS + DATAs (Plan C)

   This plan represents a WebSocket frame by a HTTP/2.0 HEADERS frame
   preceding multiple DATA frames.  END_SEGMENT flag MUST be turned on
   at the end DATA frame of a WebSocket frame.  That is, the WebSocket
   over HTTP/2.0 defines _segment_ in [HTTP/2.0 draft] as _WebSocket
   frame_.  The WebSocket frame headers are stores in the HEADERS frame
   in the following mannner.





Hirano                   Expires August 16, 2014               [Page 10]

Internet-Draft    Compression Extensions for WebSocket     February 2014


   o  The ":fin" header field MUST be set as "1" when the FIN WebSocket
      frame header is on.

   o  The ":fin" header field MUST be removed when the FIN WebSocket
      frame header is off.

   o  The ":rsv1" header field MUST be set as "1" when the RSV1
      WebSocket frame header is on.

   o  The ":rsv1" header field MUST be removed when the RSV1 WebSocket
      frame header is off.

   o  The ":rsv2" header field MUST be set as "1" when the RSV2
      WebSocket frame header is on.

   o  The ":rsv2" header field MUST be removed when the RSV2 WebSocket
      frame header is off.

   o  The ":rsv3" header field MUST be set as "1" when the RSV3
      WebSocket frame header is on.

   o  The ":rsv3" header field MUST be removed when the RSV3 WebSocket
      frame header is off.

   o  The ":length" header field MUST be set as the hexadecimal
      representation of the WebSocket LENGTH header.

5.3.  Masking

   [RFC6455] defines the masking mechanism which masks WebSocket frame
   data payload with a random masking-key.  On the WebSocket over
   HTTP/2.0, masking mechanism MUST be disabled.



















Hirano                   Expires August 16, 2014               [Page 11]

Internet-Draft    Compression Extensions for WebSocket     February 2014


6.  Alternative Framing Design

   Other framing plans which do not preserve [RFC6455] semantics are
   also proposed.  If one of such plans is adopted, we can't reuse
   [RFC6455] any more and we must specify more things than the current
   draft.













































Hirano                   Expires August 16, 2014               [Page 12]

Internet-Draft    Compression Extensions for WebSocket     February 2014


7.  Sending and Receiving Data

   Same as Section 6 "Sending and Receiving Data" in [RFC6455]
















































Hirano                   Expires August 16, 2014               [Page 13]

Internet-Draft    Compression Extensions for WebSocket     February 2014


8.  Closing the Connection

   Some definitions defined in [RFC6455] are overwritten in this
   section.

8.1.  Definitions

8.1.1.  Close the WebSocket Connection

   To _Close the WebSocket Connection_, an endpoint closes the
   underlying HTTP/2.0 stream.  An endpoint SHOULD use a method that
   cleanly closes the stream if applicable.  An endpoint MAY close the
   stream or the underlying HTTP/2.0 session via any means available
   when necessary, such as when under attack.

   The underlying TCP connection, in most normal cases, SHOULD be closed
   first by the server, so that it holds the TIME_WAIT state and not the
   client (as this would prevent it from re-opening the connection for 2
   MSL, while there is no corresponding server impact as a TIME_WAIT
   connection is immediately reopened upon a new SYN with a higher seq
   number).  In abnormal cases (such as not having received a TCP Close
   from the server after a reasonable amount of time) a client MAY
   initiate the TCP Close.  As such, when a server is instructed to
   _Close the WebSocket Connection_ it SHOULD initiate a TCP Close
   immediately, and when a client is instructed to do the same, it
   SHOULD wait for a TCP Close from the server.

   As an example of how to obtain a clean closure in C using Berkeley
   sockets, one would call shutdown() with SHUT_WR on the socket, call
   recv() until obtaining a return value of 0 indicating that the peer
   has also performed an orderly shutdown, and finally calling close()
   on the socket.

8.1.2.  Start the WebSocket Closing Handshake

   To _Start the WebSocket Closing Handshake_ with a status code
   (Section 8.4) /code/ and an optional close reason (Section 8.1.6)
   /reason/, an endpoint MUST send a Close control frame, as described
   in [RFC6455] whose status code is set to /code/ and whose close
   reason is set to /reason/.  The last HTTP/2.0 frame that containing
   the WebSocket Close control frame MUST turn END_STREAM flag on.

8.1.3.  The WebSocket Closing Handshake is Started

   Same as Section 7.1.3 in [RFC6455].






Hirano                   Expires August 16, 2014               [Page 14]

Internet-Draft    Compression Extensions for WebSocket     February 2014


8.1.4.  The WebSocket Connection is Closed

   When the underlying HTTP stream is closed, it is said that _The
   WebSocket Connection is Closed_ and that the WebSocket connection is
   in the CLOSED state.  If the stream was closed after the WebSocket
   closing handshake was completed, the WebSocket connection is said to
   have been closed _cleanly_.

   If the WebSocket connection could not be established, it is also said
   that _The WebSocket Connection is Closed_, but not cleanly.

8.1.5.  The WebSocket Connection Close Code

   Same as Section 7.1.5 in [RFC6455].

8.1.6.  The WebSocket Connection Close Reason

   Same as Section 7.1.6 in [RFC6455].

8.1.7.  Fail the WebSocket Connection

   Same as Section 7.1.7 in [RFC6455].

8.2.  Abnormal Closures

8.2.1.  Client-Initiated Closure

   If at any point the underlying HTTP/2.0 stream is unexpectedly reset,
   the client MUST _Fail the WebSocket Connection_.

   Except as indicated above or as specified by the application layer
   (e.g. a script using the WebSocket API), clients SHOULD NOT close the
   connection.

8.2.2.  Server-initiated closure

   Same as Section 7.2.2 in [RFC6455].

8.2.3.  Recovering from Abnormal Closure

   Same as Section 7.2.3 in [RFC6455].

8.3.  Normal Closure of Connections

   Same as Section 7.3 in [RFC6455].






Hirano                   Expires August 16, 2014               [Page 15]

Internet-Draft    Compression Extensions for WebSocket     February 2014


8.4.  Status Codes

   Same as Section 7.4 in [RFC6455].
















































Hirano                   Expires August 16, 2014               [Page 16]

Internet-Draft    Compression Extensions for WebSocket     February 2014


9.  Security Considerations

   [RFC6455] frame has the masking mechanism for two purposes.

   o  To prevent a misbehavior of transparent proxies.

   o  To prevent TLS side-channel attacks such as [BEAST].

   These should be addressed at the HTTP/2.0 framing layer and the
   WebSocket over HTTP/2.0 has no masking mechanism.









































Hirano                   Expires August 16, 2014               [Page 17]

Internet-Draft    Compression Extensions for WebSocket     February 2014


10.  IANA Considerations


















































Hirano                   Expires August 16, 2014               [Page 18]

Internet-Draft    Compression Extensions for WebSocket     February 2014


11.  References

11.1.  Normative References

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

   [RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol",
              RFC 6455, December 2011.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [HTTP/2.0 draft]
              Belshe, M., Peon, R., Thomson, M., and A. Melnikov,
              "Hypertext Transfer Protocol version 2.0", September 2012.

   [ALPN draft]
              Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application Layer Protocol
              Negotiation Extension", January 2014.

11.2.  Informative References

   [BEAST]    Duong, T. and J. Rizzo, "The BEAST attack".


























Hirano                   Expires August 16, 2014               [Page 19]

Internet-Draft    Compression Extensions for WebSocket     February 2014


Author's Address

   Yutaka Hirano
   Google, Inc.

   Email: yhirano@google.com













































Hirano                   Expires August 16, 2014               [Page 20]

